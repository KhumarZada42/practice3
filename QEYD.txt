index.js achib npm init -y + npm i + cd .\server\
npm i cors express nodemon body-parser dotenv
test=> "start":"nodemon indx.js"

const express=require("express")
const cors=require("cors")
const bodyParser=require("bodyParser")
const dotenv=require("dotenv")

npm i mongoose
const mongoose=require("mongoose")

.env ach

CONNECTION_URL=     PASSWORD=    PORT=

mongodb
DATABASE ACCESS NEW+
DATABASE CONNECT 2ND


dotenv.config()

const {Schema}=mongoose;

const userSchema=new Schema(
    {
        fullName:{type:String,required:true},
        userName:{type:String,required:true},
        age:{type:Number,required:true},
        imageUrl:{type:String,required:true}
    },
    {timestamps:true}
)

const Users=mongoose.model("users",userSchema)

const app=express()

app.use(cors())
app.use(bodyParser.json())

app.get('/', (req, res) => {
    res.send('Hello World!')
})

//Get All USers
app.get("/users",(req,res)=>{
    Users.find({},(err,docs)=>{
        if(!err){
            res.send(docs)
        }
        else{
            res.status(404).json({message:err})
        }
    })
})


//get user by id
app.get("/users/:id",(req,res)=>{
    const {id}=req.params
    Users.findById(id,(err,doc)=>{
        if(!err){
           if(doc){
            res.send(doc)

           }else{
            res.status(404).json({message:"NOT FOUND"})
           }
        }else{
            res.status(500).json({message:err})
        }
    })
})

//Delete user
app.delete("/users/:id",(req,res)=>{

    const {id}=req.params
    Users.findByIdAndDelete(id,(err)=>{
        if(!err){
            res.send("Deleted data")
            
        }else{
            res.status(404).json({message:err})
        }
    })
})

//Add User
app.post("/users",(req,res)=>{
    const user=new Users({
        fullName:req.body.fullName,
        userName:req.body.userName,
        age:req.body.age,
        imageUrl:req.body.imageUrl
    })
    user.save()
    res.send({message:"User Created"})
})

//Update user
app.put("/users/:id",(req,res)=>{
    const {id}=req.params

    Users.findByIdAndUpdate(id,req.body,(err,doc)=>{
        if(!err){
            res.status(200)
        }
        else{
            res.status(404).json({message:err})
        }
    })
    res.send({message:"Successfully Updated"})
})


const PORT=process.env.PORT
const url=process.env.CONNECTION_URL.replace("<password">,process.env.PASSWORD)
mongoose.set('strictQuery',true); <--
mongoose.connect(url,(err)=>){      |
if(!err){                           |
console.log("DB connect");          |
app.listen(PORT,()=>{               |
console.log("Server start");        |
})                                  |
}                                   |
})                                  |
npm run start                       |
'mongoose.set('strictQuery',true);-->

localhost:2020